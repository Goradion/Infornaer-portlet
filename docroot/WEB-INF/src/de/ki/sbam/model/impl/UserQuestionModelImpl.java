/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package de.ki.sbam.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import de.ki.sbam.model.UserQuestion;
import de.ki.sbam.model.UserQuestionModel;
import de.ki.sbam.model.UserQuestionSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the UserQuestion service. Represents a row in the &quot;sbam_UserQuestion&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link UserQuestionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link UserQuestionImpl}.
 * </p>
 *
 * @author Alexander Mueller
 * @see UserQuestionImpl
 * @see UserQuestion
 * @see UserQuestionModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class UserQuestionModelImpl extends BaseModelImpl<UserQuestion>
	implements UserQuestionModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a user question model instance should use the {@link UserQuestion} interface instead.
	 */
	public static final String TABLE_NAME = "sbam_UserQuestion";
	public static final Object[][] TABLE_COLUMNS = {
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "questionId", Types.BIGINT },
			{ "question", Types.VARCHAR },
			{ "answerA", Types.VARCHAR },
			{ "answerB", Types.VARCHAR },
			{ "answerC", Types.VARCHAR },
			{ "answerD", Types.VARCHAR },
			{ "category", Types.VARCHAR },
			{ "difficulty", Types.INTEGER },
			{ "rightAnswer", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("questionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("question", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("answerA", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("answerB", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("answerC", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("answerD", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("category", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("difficulty", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("rightAnswer", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table sbam_UserQuestion (userId LONG,userName VARCHAR(75) null,questionId LONG not null primary key,question VARCHAR(75) null,answerA VARCHAR(75) null,answerB VARCHAR(75) null,answerC VARCHAR(75) null,answerD VARCHAR(75) null,category VARCHAR(75) null,difficulty INTEGER,rightAnswer VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table sbam_UserQuestion";
	public static final String ORDER_BY_JPQL = " ORDER BY userQuestion.questionId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY sbam_UserQuestion.questionId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.de.ki.sbam.model.UserQuestion"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.de.ki.sbam.model.UserQuestion"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.de.ki.sbam.model.UserQuestion"),
			true);
	public static final long CATEGORY_COLUMN_BITMASK = 1L;
	public static final long DIFFICULTY_COLUMN_BITMASK = 2L;
	public static final long QUESTIONID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static UserQuestion toModel(UserQuestionSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		UserQuestion model = new UserQuestionImpl();

		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setQuestionId(soapModel.getQuestionId());
		model.setQuestion(soapModel.getQuestion());
		model.setAnswerA(soapModel.getAnswerA());
		model.setAnswerB(soapModel.getAnswerB());
		model.setAnswerC(soapModel.getAnswerC());
		model.setAnswerD(soapModel.getAnswerD());
		model.setCategory(soapModel.getCategory());
		model.setDifficulty(soapModel.getDifficulty());
		model.setRightAnswer(soapModel.getRightAnswer());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<UserQuestion> toModels(UserQuestionSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<UserQuestion> models = new ArrayList<UserQuestion>(soapModels.length);

		for (UserQuestionSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.de.ki.sbam.model.UserQuestion"));

	public UserQuestionModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _questionId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setQuestionId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _questionId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return UserQuestion.class;
	}

	@Override
	public String getModelClassName() {
		return UserQuestion.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("questionId", getQuestionId());
		attributes.put("question", getQuestion());
		attributes.put("answerA", getAnswerA());
		attributes.put("answerB", getAnswerB());
		attributes.put("answerC", getAnswerC());
		attributes.put("answerD", getAnswerD());
		attributes.put("category", getCategory());
		attributes.put("difficulty", getDifficulty());
		attributes.put("rightAnswer", getRightAnswer());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Long questionId = (Long)attributes.get("questionId");

		if (questionId != null) {
			setQuestionId(questionId);
		}

		String question = (String)attributes.get("question");

		if (question != null) {
			setQuestion(question);
		}

		String answerA = (String)attributes.get("answerA");

		if (answerA != null) {
			setAnswerA(answerA);
		}

		String answerB = (String)attributes.get("answerB");

		if (answerB != null) {
			setAnswerB(answerB);
		}

		String answerC = (String)attributes.get("answerC");

		if (answerC != null) {
			setAnswerC(answerC);
		}

		String answerD = (String)attributes.get("answerD");

		if (answerD != null) {
			setAnswerD(answerD);
		}

		String category = (String)attributes.get("category");

		if (category != null) {
			setCategory(category);
		}

		Integer difficulty = (Integer)attributes.get("difficulty");

		if (difficulty != null) {
			setDifficulty(difficulty);
		}

		String rightAnswer = (String)attributes.get("rightAnswer");

		if (rightAnswer != null) {
			setRightAnswer(rightAnswer);
		}
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public long getQuestionId() {
		return _questionId;
	}

	@Override
	public void setQuestionId(long questionId) {
		_questionId = questionId;
	}

	@JSON
	@Override
	public String getQuestion() {
		if (_question == null) {
			return StringPool.BLANK;
		}
		else {
			return _question;
		}
	}

	@Override
	public void setQuestion(String question) {
		_question = question;
	}

	@JSON
	@Override
	public String getAnswerA() {
		if (_answerA == null) {
			return StringPool.BLANK;
		}
		else {
			return _answerA;
		}
	}

	@Override
	public void setAnswerA(String answerA) {
		_answerA = answerA;
	}

	@JSON
	@Override
	public String getAnswerB() {
		if (_answerB == null) {
			return StringPool.BLANK;
		}
		else {
			return _answerB;
		}
	}

	@Override
	public void setAnswerB(String answerB) {
		_answerB = answerB;
	}

	@JSON
	@Override
	public String getAnswerC() {
		if (_answerC == null) {
			return StringPool.BLANK;
		}
		else {
			return _answerC;
		}
	}

	@Override
	public void setAnswerC(String answerC) {
		_answerC = answerC;
	}

	@JSON
	@Override
	public String getAnswerD() {
		if (_answerD == null) {
			return StringPool.BLANK;
		}
		else {
			return _answerD;
		}
	}

	@Override
	public void setAnswerD(String answerD) {
		_answerD = answerD;
	}

	@JSON
	@Override
	public String getCategory() {
		if (_category == null) {
			return StringPool.BLANK;
		}
		else {
			return _category;
		}
	}

	@Override
	public void setCategory(String category) {
		_columnBitmask |= CATEGORY_COLUMN_BITMASK;

		if (_originalCategory == null) {
			_originalCategory = _category;
		}

		_category = category;
	}

	public String getOriginalCategory() {
		return GetterUtil.getString(_originalCategory);
	}

	@JSON
	@Override
	public int getDifficulty() {
		return _difficulty;
	}

	@Override
	public void setDifficulty(int difficulty) {
		_columnBitmask |= DIFFICULTY_COLUMN_BITMASK;

		if (!_setOriginalDifficulty) {
			_setOriginalDifficulty = true;

			_originalDifficulty = _difficulty;
		}

		_difficulty = difficulty;
	}

	public int getOriginalDifficulty() {
		return _originalDifficulty;
	}

	@JSON
	@Override
	public String getRightAnswer() {
		if (_rightAnswer == null) {
			return StringPool.BLANK;
		}
		else {
			return _rightAnswer;
		}
	}

	@Override
	public void setRightAnswer(String rightAnswer) {
		_rightAnswer = rightAnswer;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			UserQuestion.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public UserQuestion toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (UserQuestion)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		UserQuestionImpl userQuestionImpl = new UserQuestionImpl();

		userQuestionImpl.setUserId(getUserId());
		userQuestionImpl.setUserName(getUserName());
		userQuestionImpl.setQuestionId(getQuestionId());
		userQuestionImpl.setQuestion(getQuestion());
		userQuestionImpl.setAnswerA(getAnswerA());
		userQuestionImpl.setAnswerB(getAnswerB());
		userQuestionImpl.setAnswerC(getAnswerC());
		userQuestionImpl.setAnswerD(getAnswerD());
		userQuestionImpl.setCategory(getCategory());
		userQuestionImpl.setDifficulty(getDifficulty());
		userQuestionImpl.setRightAnswer(getRightAnswer());

		userQuestionImpl.resetOriginalValues();

		return userQuestionImpl;
	}

	@Override
	public int compareTo(UserQuestion userQuestion) {
		long primaryKey = userQuestion.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof UserQuestion)) {
			return false;
		}

		UserQuestion userQuestion = (UserQuestion)obj;

		long primaryKey = userQuestion.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		UserQuestionModelImpl userQuestionModelImpl = this;

		userQuestionModelImpl._originalCategory = userQuestionModelImpl._category;

		userQuestionModelImpl._originalDifficulty = userQuestionModelImpl._difficulty;

		userQuestionModelImpl._setOriginalDifficulty = false;

		userQuestionModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<UserQuestion> toCacheModel() {
		UserQuestionCacheModel userQuestionCacheModel = new UserQuestionCacheModel();

		userQuestionCacheModel.userId = getUserId();

		userQuestionCacheModel.userName = getUserName();

		String userName = userQuestionCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			userQuestionCacheModel.userName = null;
		}

		userQuestionCacheModel.questionId = getQuestionId();

		userQuestionCacheModel.question = getQuestion();

		String question = userQuestionCacheModel.question;

		if ((question != null) && (question.length() == 0)) {
			userQuestionCacheModel.question = null;
		}

		userQuestionCacheModel.answerA = getAnswerA();

		String answerA = userQuestionCacheModel.answerA;

		if ((answerA != null) && (answerA.length() == 0)) {
			userQuestionCacheModel.answerA = null;
		}

		userQuestionCacheModel.answerB = getAnswerB();

		String answerB = userQuestionCacheModel.answerB;

		if ((answerB != null) && (answerB.length() == 0)) {
			userQuestionCacheModel.answerB = null;
		}

		userQuestionCacheModel.answerC = getAnswerC();

		String answerC = userQuestionCacheModel.answerC;

		if ((answerC != null) && (answerC.length() == 0)) {
			userQuestionCacheModel.answerC = null;
		}

		userQuestionCacheModel.answerD = getAnswerD();

		String answerD = userQuestionCacheModel.answerD;

		if ((answerD != null) && (answerD.length() == 0)) {
			userQuestionCacheModel.answerD = null;
		}

		userQuestionCacheModel.category = getCategory();

		String category = userQuestionCacheModel.category;

		if ((category != null) && (category.length() == 0)) {
			userQuestionCacheModel.category = null;
		}

		userQuestionCacheModel.difficulty = getDifficulty();

		userQuestionCacheModel.rightAnswer = getRightAnswer();

		String rightAnswer = userQuestionCacheModel.rightAnswer;

		if ((rightAnswer != null) && (rightAnswer.length() == 0)) {
			userQuestionCacheModel.rightAnswer = null;
		}

		return userQuestionCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(23);

		sb.append("{userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", questionId=");
		sb.append(getQuestionId());
		sb.append(", question=");
		sb.append(getQuestion());
		sb.append(", answerA=");
		sb.append(getAnswerA());
		sb.append(", answerB=");
		sb.append(getAnswerB());
		sb.append(", answerC=");
		sb.append(getAnswerC());
		sb.append(", answerD=");
		sb.append(getAnswerD());
		sb.append(", category=");
		sb.append(getCategory());
		sb.append(", difficulty=");
		sb.append(getDifficulty());
		sb.append(", rightAnswer=");
		sb.append(getRightAnswer());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(37);

		sb.append("<model><model-name>");
		sb.append("de.ki.sbam.model.UserQuestion");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>questionId</column-name><column-value><![CDATA[");
		sb.append(getQuestionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>question</column-name><column-value><![CDATA[");
		sb.append(getQuestion());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>answerA</column-name><column-value><![CDATA[");
		sb.append(getAnswerA());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>answerB</column-name><column-value><![CDATA[");
		sb.append(getAnswerB());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>answerC</column-name><column-value><![CDATA[");
		sb.append(getAnswerC());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>answerD</column-name><column-value><![CDATA[");
		sb.append(getAnswerD());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>category</column-name><column-value><![CDATA[");
		sb.append(getCategory());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>difficulty</column-name><column-value><![CDATA[");
		sb.append(getDifficulty());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rightAnswer</column-name><column-value><![CDATA[");
		sb.append(getRightAnswer());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = UserQuestion.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			UserQuestion.class
		};
	private long _userId;
	private String _userName;
	private long _questionId;
	private String _question;
	private String _answerA;
	private String _answerB;
	private String _answerC;
	private String _answerD;
	private String _category;
	private String _originalCategory;
	private int _difficulty;
	private int _originalDifficulty;
	private boolean _setOriginalDifficulty;
	private String _rightAnswer;
	private long _columnBitmask;
	private UserQuestion _escapedModel;
}