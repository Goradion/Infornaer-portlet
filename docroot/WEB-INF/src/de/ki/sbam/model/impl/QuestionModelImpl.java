/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package de.ki.sbam.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import de.ki.sbam.model.Question;
import de.ki.sbam.model.QuestionModel;
import de.ki.sbam.model.QuestionSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Question service. Represents a row in the &quot;sbam_Question&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link QuestionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link QuestionImpl}.
 * </p>
 *
 * @author Alexander Mueller, Simon Bastian
 * @see QuestionImpl
 * @see Question
 * @see QuestionModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class QuestionModelImpl extends BaseModelImpl<Question>
	implements QuestionModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a question model instance should use the {@link Question} interface instead.
	 */
	public static final String TABLE_NAME = "sbam_Question";
	public static final Object[][] TABLE_COLUMNS = {
			{ "questionId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "questionContent", Types.VARCHAR },
			{ "answerA", Types.VARCHAR },
			{ "answerB", Types.VARCHAR },
			{ "answerC", Types.VARCHAR },
			{ "answerD", Types.VARCHAR },
			{ "categoryId_fk", Types.BIGINT },
			{ "difficultyId_fk", Types.BIGINT },
			{ "rightAnswer", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("questionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("questionContent", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("answerA", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("answerB", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("answerC", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("answerD", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("categoryId_fk", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("difficultyId_fk", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("rightAnswer", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table sbam_Question (questionId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,questionContent STRING null,answerA VARCHAR(75) null,answerB VARCHAR(75) null,answerC VARCHAR(75) null,answerD VARCHAR(75) null,categoryId_fk LONG,difficultyId_fk LONG,rightAnswer VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table sbam_Question";
	public static final String ORDER_BY_JPQL = " ORDER BY question.questionId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY sbam_Question.questionId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.de.ki.sbam.model.Question"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.de.ki.sbam.model.Question"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.de.ki.sbam.model.Question"),
			true);
<<<<<<< HEAD
	public static final long CATEGORYID_FK_COLUMN_BITMASK = 1L;
	public static final long DIFFICULTYID_FK_COLUMN_BITMASK = 2L;
	public static final long QUESTIONID_COLUMN_BITMASK = 4L;
=======
	public static final long CATEGORY_COLUMN_BITMASK = 1L;
	public static final long CATEGORYID_FK_COLUMN_BITMASK = 2L;
	public static final long DIFFICULTY_COLUMN_BITMASK = 4L;
	public static final long QUESTIONID_COLUMN_BITMASK = 8L;
>>>>>>> 4efe1569ec40cba279a2c58de988bd69fc9b59d6

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Question toModel(QuestionSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Question model = new QuestionImpl();

		model.setQuestionId(soapModel.getQuestionId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setQuestionContent(soapModel.getQuestionContent());
		model.setAnswerA(soapModel.getAnswerA());
		model.setAnswerB(soapModel.getAnswerB());
		model.setAnswerC(soapModel.getAnswerC());
		model.setAnswerD(soapModel.getAnswerD());
		model.setCategoryId_fk(soapModel.getCategoryId_fk());
		model.setDifficultyId_fk(soapModel.getDifficultyId_fk());
		model.setRightAnswer(soapModel.getRightAnswer());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Question> toModels(QuestionSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Question> models = new ArrayList<Question>(soapModels.length);

		for (QuestionSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.de.ki.sbam.model.Question"));

	public QuestionModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _questionId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setQuestionId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _questionId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Question.class;
	}

	@Override
	public String getModelClassName() {
		return Question.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("questionId", getQuestionId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("questionContent", getQuestionContent());
		attributes.put("answerA", getAnswerA());
		attributes.put("answerB", getAnswerB());
		attributes.put("answerC", getAnswerC());
		attributes.put("answerD", getAnswerD());
		attributes.put("categoryId_fk", getCategoryId_fk());
		attributes.put("difficultyId_fk", getDifficultyId_fk());
		attributes.put("rightAnswer", getRightAnswer());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long questionId = (Long)attributes.get("questionId");

		if (questionId != null) {
			setQuestionId(questionId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String questionContent = (String)attributes.get("questionContent");

		if (questionContent != null) {
			setQuestionContent(questionContent);
		}

		String answerA = (String)attributes.get("answerA");

		if (answerA != null) {
			setAnswerA(answerA);
		}

		String answerB = (String)attributes.get("answerB");

		if (answerB != null) {
			setAnswerB(answerB);
		}

		String answerC = (String)attributes.get("answerC");

		if (answerC != null) {
			setAnswerC(answerC);
		}

		String answerD = (String)attributes.get("answerD");

		if (answerD != null) {
			setAnswerD(answerD);
		}

		Long categoryId_fk = (Long)attributes.get("categoryId_fk");

		if (categoryId_fk != null) {
			setCategoryId_fk(categoryId_fk);
		}

		Long difficultyId_fk = (Long)attributes.get("difficultyId_fk");

		if (difficultyId_fk != null) {
			setDifficultyId_fk(difficultyId_fk);
		}

		String rightAnswer = (String)attributes.get("rightAnswer");

		if (rightAnswer != null) {
			setRightAnswer(rightAnswer);
		}
	}

	@JSON
	@Override
	public long getQuestionId() {
		return _questionId;
	}

	@Override
	public void setQuestionId(long questionId) {
		_columnBitmask = -1L;

		if (!_setOriginalQuestionId) {
			_setOriginalQuestionId = true;

			_originalQuestionId = _questionId;
		}

		_questionId = questionId;
	}

	public long getOriginalQuestionId() {
		return _originalQuestionId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getQuestionContent() {
		if (_questionContent == null) {
			return StringPool.BLANK;
		}
		else {
			return _questionContent;
		}
	}

	@Override
	public void setQuestionContent(String questionContent) {
		_questionContent = questionContent;
	}

	@JSON
	@Override
	public String getAnswerA() {
		if (_answerA == null) {
			return StringPool.BLANK;
		}
		else {
			return _answerA;
		}
	}

	@Override
	public void setAnswerA(String answerA) {
		_answerA = answerA;
	}

	@JSON
	@Override
	public String getAnswerB() {
		if (_answerB == null) {
			return StringPool.BLANK;
		}
		else {
			return _answerB;
		}
	}

	@Override
	public void setAnswerB(String answerB) {
		_answerB = answerB;
	}

	@JSON
	@Override
	public String getAnswerC() {
		if (_answerC == null) {
			return StringPool.BLANK;
		}
		else {
			return _answerC;
		}
	}

	@Override
	public void setAnswerC(String answerC) {
		_answerC = answerC;
	}

	@JSON
	@Override
	public String getAnswerD() {
		if (_answerD == null) {
			return StringPool.BLANK;
		}
		else {
			return _answerD;
		}
	}

	@Override
	public void setAnswerD(String answerD) {
		_answerD = answerD;
	}

	@JSON
	@Override
	public long getCategoryId_fk() {
		return _categoryId_fk;
	}

	@Override
	public void setCategoryId_fk(long categoryId_fk) {
		_columnBitmask |= CATEGORYID_FK_COLUMN_BITMASK;
<<<<<<< HEAD
=======

		if (!_setOriginalCategoryId_fk) {
			_setOriginalCategoryId_fk = true;

			_originalCategoryId_fk = _categoryId_fk;
		}

		_categoryId_fk = categoryId_fk;
	}

	public long getOriginalCategoryId_fk() {
		return _originalCategoryId_fk;
	}

	@JSON
	@Override
	public String getCategory() {
		if (_category == null) {
			return StringPool.BLANK;
		}
		else {
			return _category;
		}
	}
>>>>>>> 4efe1569ec40cba279a2c58de988bd69fc9b59d6

		if (!_setOriginalCategoryId_fk) {
			_setOriginalCategoryId_fk = true;

			_originalCategoryId_fk = _categoryId_fk;
		}

		_categoryId_fk = categoryId_fk;
	}

	public long getOriginalCategoryId_fk() {
		return _originalCategoryId_fk;
	}

	@JSON
	@Override
	public long getDifficultyId_fk() {
		return _difficultyId_fk;
	}

	@Override
	public void setDifficultyId_fk(long difficultyId_fk) {
		_columnBitmask |= DIFFICULTYID_FK_COLUMN_BITMASK;

		if (!_setOriginalDifficultyId_fk) {
			_setOriginalDifficultyId_fk = true;

			_originalDifficultyId_fk = _difficultyId_fk;
		}

		_difficultyId_fk = difficultyId_fk;
	}

	public long getOriginalDifficultyId_fk() {
		return _originalDifficultyId_fk;
	}

	@JSON
	@Override
	public String getRightAnswer() {
		if (_rightAnswer == null) {
			return StringPool.BLANK;
		}
		else {
			return _rightAnswer;
		}
	}

	@Override
	public void setRightAnswer(String rightAnswer) {
		_rightAnswer = rightAnswer;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Question.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Question toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Question)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		QuestionImpl questionImpl = new QuestionImpl();

		questionImpl.setQuestionId(getQuestionId());
		questionImpl.setGroupId(getGroupId());
		questionImpl.setCompanyId(getCompanyId());
		questionImpl.setUserId(getUserId());
		questionImpl.setUserName(getUserName());
		questionImpl.setCreateDate(getCreateDate());
		questionImpl.setModifiedDate(getModifiedDate());
		questionImpl.setQuestionContent(getQuestionContent());
		questionImpl.setAnswerA(getAnswerA());
		questionImpl.setAnswerB(getAnswerB());
		questionImpl.setAnswerC(getAnswerC());
		questionImpl.setAnswerD(getAnswerD());
		questionImpl.setCategoryId_fk(getCategoryId_fk());
		questionImpl.setDifficultyId_fk(getDifficultyId_fk());
		questionImpl.setRightAnswer(getRightAnswer());

		questionImpl.resetOriginalValues();

		return questionImpl;
	}

	@Override
	public int compareTo(Question question) {
		int value = 0;

		if (getQuestionId() < question.getQuestionId()) {
			value = -1;
		}
		else if (getQuestionId() > question.getQuestionId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Question)) {
			return false;
		}

		Question question = (Question)obj;

		long primaryKey = question.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		QuestionModelImpl questionModelImpl = this;

		questionModelImpl._originalQuestionId = questionModelImpl._questionId;

		questionModelImpl._setOriginalQuestionId = false;

		questionModelImpl._setModifiedDate = false;

		questionModelImpl._originalCategoryId_fk = questionModelImpl._categoryId_fk;

		questionModelImpl._setOriginalCategoryId_fk = false;
<<<<<<< HEAD
=======

		questionModelImpl._originalCategory = questionModelImpl._category;
>>>>>>> 4efe1569ec40cba279a2c58de988bd69fc9b59d6

		questionModelImpl._originalDifficultyId_fk = questionModelImpl._difficultyId_fk;

		questionModelImpl._setOriginalDifficultyId_fk = false;

		questionModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Question> toCacheModel() {
		QuestionCacheModel questionCacheModel = new QuestionCacheModel();

		questionCacheModel.questionId = getQuestionId();

		questionCacheModel.groupId = getGroupId();

		questionCacheModel.companyId = getCompanyId();

		questionCacheModel.userId = getUserId();

		questionCacheModel.userName = getUserName();

		String userName = questionCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			questionCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			questionCacheModel.createDate = createDate.getTime();
		}
		else {
			questionCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			questionCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			questionCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		questionCacheModel.questionContent = getQuestionContent();

		String questionContent = questionCacheModel.questionContent;

		if ((questionContent != null) && (questionContent.length() == 0)) {
			questionCacheModel.questionContent = null;
		}

		questionCacheModel.answerA = getAnswerA();

		String answerA = questionCacheModel.answerA;

		if ((answerA != null) && (answerA.length() == 0)) {
			questionCacheModel.answerA = null;
		}

		questionCacheModel.answerB = getAnswerB();

		String answerB = questionCacheModel.answerB;

		if ((answerB != null) && (answerB.length() == 0)) {
			questionCacheModel.answerB = null;
		}

		questionCacheModel.answerC = getAnswerC();

		String answerC = questionCacheModel.answerC;

		if ((answerC != null) && (answerC.length() == 0)) {
			questionCacheModel.answerC = null;
		}

		questionCacheModel.answerD = getAnswerD();

		String answerD = questionCacheModel.answerD;

		if ((answerD != null) && (answerD.length() == 0)) {
			questionCacheModel.answerD = null;
		}

		questionCacheModel.categoryId_fk = getCategoryId_fk();

		questionCacheModel.difficultyId_fk = getDifficultyId_fk();

		questionCacheModel.rightAnswer = getRightAnswer();

		String rightAnswer = questionCacheModel.rightAnswer;

		if ((rightAnswer != null) && (rightAnswer.length() == 0)) {
			questionCacheModel.rightAnswer = null;
		}

		return questionCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(31);

		sb.append("{questionId=");
		sb.append(getQuestionId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", questionContent=");
		sb.append(getQuestionContent());
		sb.append(", answerA=");
		sb.append(getAnswerA());
		sb.append(", answerB=");
		sb.append(getAnswerB());
		sb.append(", answerC=");
		sb.append(getAnswerC());
		sb.append(", answerD=");
		sb.append(getAnswerD());
		sb.append(", categoryId_fk=");
		sb.append(getCategoryId_fk());
		sb.append(", difficultyId_fk=");
		sb.append(getDifficultyId_fk());
		sb.append(", rightAnswer=");
		sb.append(getRightAnswer());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(49);

		sb.append("<model><model-name>");
		sb.append("de.ki.sbam.model.Question");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>questionId</column-name><column-value><![CDATA[");
		sb.append(getQuestionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>questionContent</column-name><column-value><![CDATA[");
		sb.append(getQuestionContent());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>answerA</column-name><column-value><![CDATA[");
		sb.append(getAnswerA());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>answerB</column-name><column-value><![CDATA[");
		sb.append(getAnswerB());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>answerC</column-name><column-value><![CDATA[");
		sb.append(getAnswerC());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>answerD</column-name><column-value><![CDATA[");
		sb.append(getAnswerD());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>categoryId_fk</column-name><column-value><![CDATA[");
		sb.append(getCategoryId_fk());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>difficultyId_fk</column-name><column-value><![CDATA[");
		sb.append(getDifficultyId_fk());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rightAnswer</column-name><column-value><![CDATA[");
		sb.append(getRightAnswer());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Question.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Question.class
		};
	private long _questionId;
	private long _originalQuestionId;
	private boolean _setOriginalQuestionId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _questionContent;
	private String _answerA;
	private String _answerB;
	private String _answerC;
	private String _answerD;
	private long _categoryId_fk;
	private long _originalCategoryId_fk;
	private boolean _setOriginalCategoryId_fk;
<<<<<<< HEAD
	private long _difficultyId_fk;
	private long _originalDifficultyId_fk;
	private boolean _setOriginalDifficultyId_fk;
=======
	private String _category;
	private String _originalCategory;
	private int _difficulty;
	private int _originalDifficulty;
	private boolean _setOriginalDifficulty;
>>>>>>> 4efe1569ec40cba279a2c58de988bd69fc9b59d6
	private String _rightAnswer;
	private long _columnBitmask;
	private Question _escapedModel;
}